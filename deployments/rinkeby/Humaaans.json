{
  "address": "0xCEAB12a2e90DceE83BAd7C209184B3edC7369661",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LinkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "string[][]",
          "name": "_hairs",
          "type": "string[][]"
        },
        {
          "internalType": "string[][]",
          "name": "_legs",
          "type": "string[][]"
        },
        {
          "internalType": "string[][]",
          "name": "_bodies",
          "type": "string[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "CreatedSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "CreatedUnfinishedSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomNumber",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "alreadyMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bodies",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        }
      ],
      "name": "formatTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hairs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "legs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBodies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxHairs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLegs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c8de975a431210ba80c433d0ccf661ad6336674c65e29de6a69c00a52f5c9e4",
  "receipt": {
    "to": null,
    "from": "0xB10eFf9454bd358FbFdb1AF033a20768e9247cB6",
    "contractAddress": "0xCEAB12a2e90DceE83BAd7C209184B3edC7369661",
    "transactionIndex": 10,
    "gasUsed": "16868124",
    "logsBloom": "0x
    "blockHash": "0x0f46b098fe16ee3e89246b789de4df46bf6b61f7fec38780e49e091812e4707c",
    "transactionHash": "0x5c8de975a431210ba80c433d0ccf661ad6336674c65e29de6a69c00a52f5c9e4",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 10219353,
        "transactionHash": "0x5c8de975a431210ba80c433d0ccf661ad6336674c65e29de6a69c00a52f5c9e4",
        "address": "0xCEAB12a2e90DceE83BAd7C209184B3edC7369661",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b10eff9454bd358fbfdb1af033a20768e9247cb6"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x0f46b098fe16ee3e89246b789de4df46bf6b61f7fec38780e49e091812e4707c"
      }
    ],
    "blockNumber": 10219353,
    "cumulativeGasUsed": "19463121",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01be23585060835e02b77ef475b0cc51aa1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
    "100000000000000000",
    [
      [
        "d=\"m78 28-13-1-2-1-1-3a42 42 0 0 0-4-11c-3-5-7-8-12-11-5-2-12-3-18-2-6 0-12 3-18 5C4 5-2 6-8 5s-10-4-16-7c-5-3-11-5-17-5-6 1-11 3-16 6s-8 7-10 12c-3 5-3 11 1 16 5 7 15 9 24 9l14-3 17-8 8-4c3-1 5-1 8 1l8 4 9 2 18-3c5-1 10-2 15-1 2 0 5 1 6 3-13 2-17 18-14 29 2 6 13 13 18 10 3-2 1-5 0-6-2-4-3-8 1-10 3-2 7 2 7 2 1 0 9-4 14-11 6 1 7-3 5-6-1-3-9-7-14-7Z\" fill=\"#191847\""
      ],
      [
        "d=\"m70 54-3-1c-3 0-5 2-5 5s1 5 3 6l-3 3c-4 0-10-11-10-20 0-10 8-18 22-18 13 0 18 5 18 10-6 2-15 2-29 2v1l12 1 2 6c-3 0-5 2-7 5Z\" fill=\"#191847\""
      ],
      [
        "d=\"m83 28-10-1 1-8-3-8-2-4-3-1h-7l-4-2a10 10 0 0 0-8 3l-1 1v1h-1l-5 5-1 6c0 3 2 9 5 12 2 2 4 4 7 4l-4 8a36 36 0 0 0-1 17l4 7 3 1 4 1c2 1 5 1 6-1l2-2v-1l-1-1c-2-1-3-3-3-6 0-2 1-5 3-6 3-1 6 0 8 2 1-4 3-8 7-9l12-4 3-2v-3c-2-2-8-8-11-9Z\" fill=\"#191847\""
      ],
      [
        "d=\"m103 25-4-4h-2v-1l-2-3-5-2h-3l-2 1h-1c-2-2-4-2-6-2-3 0-5 0-7 2a13 13 0 0 0-2 2l-4-1-1 1h-2l-4-1-4 2-1 1-1 1-2-1h-2l-4 3a10 10 0 0 0-1 3h-1l-3 2-2 4a8 8 0 0 0-2 1c-2 1-4 3-4 5a10 10 0 0 0 0 7v1l-1 2v4a6 6 0 0 0 1 3h1l-1 2a17 17 0 0 0-1 3l1 4a4 4 0 0 0 2 2v6l3 3h8l1-1c2 2 4 2 6 1 3-1 5-2 6-4 1 1 4 1 5-1l1-2v-2l1-2v-2h-2l-2-1-1-4c-1-3-1-6 2-7l7-1 3 5h2l1-2 2-4 1-4 2-2 4-2 3-2 1-1 1 1 3 3 2 4 2 3h4l2-1v-3l-1-1-1-1 1-2 1-3v-2l-2-1 2-2c2-2 2-5 2-7Z\" fill=\"#191847\""
      ],
      [
        "d=\"M71 64c-3 6-8 10-12 10-7 0-13-10-13-22v-1c-8 6-15 17-26 17-14 0-20-30 0-30 15 0 22 2 28 5l5-8 2-2 2-1a50 50 0 0 1 18-2 10 10 0 1 1 11 10l-12 2 1 5-1 6-3-2c-4 0-6 3-6 6 0 4 2 7 6 7Z\" fill=\"#191847\""
      ],
      [
        "d=\"m45 39-2-3-1-3 1-7 5-2h4l3 2c0-2 0-5 2-7 1-2 3-3 5-3 2-1 4 0 6 1l2 1h2l1-1c2-2 5-2 7-2l3 3 2 2h1l2-1 2-1c2-1 3 0 4 1v2a155 155 0 0 1-1 5v1h2l2 1 1 1v2h5v2l-2 3-4 4c2 0 2 3 0 4l-2 1h-5c-2-1-5-2-6-4h-3l-4-1-1 5-3 1H62l11 3v2l-3 4c-2-2-5-4-7-3-3 1-6 5-4 8l5 3-2 5-2 2h-1l-1 1h-5c-2-1-1-4 0-5-2-1-5-1-4-4-4 0-13-6-8-11-3-1-5-5-3-8 1-3 4-4 7-4\" fill=\"#191847\""
      ],
      [
        "d=\"M82 42c-4 2-6 5-9 9a6 6 0 0 0-8 6l2 4-5 6c-7-4-12-15-5-26 5-23 36-9 42-13 2 8-3 15-17 14Z\" fill=\"#191847\""
      ],
      [
        "d=\"M60 70c-3-13-11-22-10-28 1-4 3-7 7-8 2-8 8-11 19-10 16 2 26 9 22 23-4 0-9-1-15 1-2 1-4 3-5 7h-3c-3-4-5-6-8-5s-4 4-2 9l-1 11h-4Z\" fill=\"#191847\""
      ],
      [
        "d=\"M75 48c1 13 3 20 7 20 6 0 11-4 14-4 2 0 1 2 0 4-1 1-6 3-6 5s4 1 4 2c0 2 1 6-3 6s-15-1-17-7c-1-4-2-11-2-23h-1a6 6 0 0 0-4 10l-5 6c-7-4-12-15-5-27 2-5 6-8 11-10h11c7 0 13 2 15 3 0 7-2 9-12 9-3 1-5 3-7 6Z\" fill=\"#191847\""
      ],
      [
        "d=\"M67 31c12-4 28 0 26 10-2 7-9 10-16 13-1-2-3-3-6-3s-6 3-6 6l1 3c-2 2-4 5-4 8-4 0-10-11-8-22h-2a15 15 0 1 1 15-15Z\" fill=\"#191847\""
      ],
      [
        "d=\"m94 45-1-4-2-5-7-7c-5-4-11-6-16-5-3 0-6 1-8 3l-7 4c-3 0-6-2-9-4-2-2-5-3-9-4-5-1-10 1-14 6-4 4-7 11-4 17 0 2 1 3 2 3l2 3c1 1 0 3-1 4l-1 5 4 8c2 2 5 3 7 3l6 1 2-1 2 1c3 2 7 3 11 2l9-3c3-2 3-5 2-9 1 0 3 1 2-1l-2-1-2-1c-3-3 0-8 2-9 5-1 5 5 8 6 2 1 4 0 5-1l4-6 2-6c1 0 2-3 1-4l9 2 2 3 1 1v-1\" fill=\"#191847\""
      ]
    ],
    [
      [
        "d=\"m134 0 49 124 33 105h13L179 0z\" fill=\"#997659\"",
        "d=\"M124 0c0 44-8 102-9 105l-84 69 9 10c65-38 99-60 102-65 4-7 19-77 31-119h-49Z\" fill=\"#B28B67\"",
        "d=\"m29 171-6 3-5 6 36 43c5-2 6-4 4-7l-4-7-8-27a1 1 0 0 0-1-1l-4 2-6-5-3-5a2 2 0 0 0-3-2Zm182 53-2 7 1 8h56c2-5 1-7-2-8l-8-1-26-12a1 1 0 0 0-2 1l-1 4-7 2-7-2a2 2 0 0 0-2 1Z\" fill=\"#E4E4E4\"",
        "d=\"m167 218 62-6L183 0h-55z\" fill=\"#69A1AC\"",
        "d=\"m43 159 41 48c43-47 68-77 75-91 7-15 13-53 19-116h-63l-6 87-66 72Z\" fill=\"#89C5CC\""
      ],
      [
        "d=\"m130 0 74 124 56 105h12L179 0z\" fill=\"#997659\"",
        "d=\"m253 224-2 7 1 8h56c2-5 1-7-2-8l-8-1-26-12a1 1 0 0 0-2 1l-1 4-7 2-7-2a2 2 0 0 0-2 1Z\" fill=\"#E4E4E4\"",
        "d=\"m245 212 23-7A1754 1754 0 0 0 183 0h-65a1028 1028 0 0 0 127 212Z\" fill=\"#DB2721\"",
        "d=\"M125 0c-7 44-20 99-22 101-1 1-31 12-92 31l3 11c72-11 110-19 114-25 6-8 35-76 46-118h-49Z\" fill=\"#B28B67\"",
        "d=\"m33 123 4 17c54 5 87 1 99-10 12-12 26-55 42-130h-63c-9 61-15 93-16 96-1 2-23 11-66 27Z\" fill=\"#FF4133\"",
        "d=\"m14 128-7-1-7 2 10 56c5 0 7-1 7-4v-8l7-28a1 1 0 0 0-1-1l-5-1-3-7 1-6a2 2 0 0 0-2-2Z\" fill=\"#E4E4E4\""
      ],
      [
        "d=\"m128 0 38 123 18 105h14L179 0z\" fill=\"#997659\"",
        "d=\"M115 0c2 68-1 102-1 109-1 6-9 45-27 121l15-6c29-69 39-104 42-113 4-10 13-46 27-111h-56Z\" fill=\"#B28B67\"",
        "d=\"m87 224-2 7 1 8h56c2-5 1-7-2-8l-8-1-26-12a1 1 0 0 0-2 1l-1 4-7 2-7-2a2 2 0 0 0-2 1Zm94 0-2 7 1 8h56c2-5 1-7-2-8l-8-1-26-12a1 1 0 0 0-2 1l-1 4-7 2-7-2a2 2 0 0 0-2 1Z\" fill=\"#E4E4E4\"",
        "d=\"m123 0 16 63h49l-7-63z\" fill=\"#69A1AC\"",
        "d=\"M114 0c-5 16-6 37-3 63h50l14-63h-61Z\" fill=\"#89C5CC\""
      ],
      [
        "d=\"m128 0 48 127 34 94h19L183 0z\" fill=\"#1F28CF\"",
        "d=\"m116 0-1 105c-1 2-26 23-76 62l10 17c59-38 90-60 93-65 4-7 27-77 39-119h-65Z\" fill=\"#2B44FF\"",
        "d=\"m22 178 16-12 14 16c1 12 5 26 12 41l-3 2-25-29-6-11-2 1-6-8Zm186 61 1-21h21c10 7 23 13 39 17v4h-38l-13-2v2h-10Z\" fill=\"#191847\""
      ],
      [
        "d=\"m128 0 36 127 27 94h19L182 0z\" fill=\"#191847\"",
        "d=\"M118 0c-1 66-3 101-4 107s-14 44-40 114h20l55-114c3-9 15-44 33-107h-64Z\" fill=\"#2F3676\"",
        "d=\"m72 239 1-21h21c10 7 23 13 39 17v4H95l-13-2v2H72Zm116 0 1-21h21c10 7 23 13 39 17v4h-38l-13-2v2h-10Z\" fill=\"#191847\""
      ],
      [
        "d=\"M97 98c24 7 45 10 62 10 18 0 34-5 49-15-23-7-43-11-58-11s-33 6-53 16Z\" fill=\"#1F28CF\"",
        "d=\"M180 118v-1c-4-9-55-100-60-117h58c4 13 21 93 24 108 7 26 23 107 26 113 2 5-10 12-14 4a620 620 0 0 1-34-107Z\" fill=\"#997659\"",
        "d=\"M133 129c-24 6-109 17-115 18-6 2-12-10-4-13a620 620 0 0 1 105-26c-1-28-5-94-2-108h51l-26 124c-2 3-5 5-9 5Z\" fill=\"#B28B67\"",
        "d=\"m14 131-7-1-7 2 10 56c5 0 7-1 7-4v-8l7-28a1 1 0 0 0-1-1l-5-1-3-7 1-6a2 2 0 0 0-2-2Zm197 93-2 7 1 8h56c2-5 1-7-2-8l-8-1-26-12a1 1 0 0 0-2 1l-1 4-7 2-7-2a2 2 0 0 0-2 1Z\" fill=\"#E4E4E4\"",
        "d=\"M117 0c23-6 44-6 64 0 7 32 24 45 27 94-34 16-76-12-111 4-10-23 4-79 20-98Z\" fill=\"#2B44FF\""
      ],
      [
        "d=\"M117 0c1 25 118 97 118 99 1 1-11 30-36 86l10 4c38-60 55-93 54-99-3-9-33-39-91-90h-55Z\" fill=\"#B28B67\"",
        "d=\"m202 172 16 6c35-39 49-72 47-88-2-12-32-41-90-90h-60c2 57 110 99 112 102 1 2-13 26-25 70Z\" fill=\"#2F3676\"",
        "d=\"m195 183-3 6-2 7 53 20c3-4 3-7 0-9l-7-3-21-20a1 1 0 0 0-1 0l-3 3h-8l-5-4a2 2 0 0 0-3 0Z\" fill=\"#E4E4E4\"",
        "d=\"M130 0 78 124 27 229h12L171 0z\" fill=\"#997659\"",
        "d=\"m27 224-2 7 1 8h56c2-5 1-7-2-8l-8-1-26-12a1 1 0 0 0-2 1l-1 4-7 2-7-2a2 2 0 0 0-2 1Z\" fill=\"#E4E4E4\"",
        "d=\"m32 207 27 5C79 182 166 58 175 0h-59C84 42 52 177 32 207Z\" fill=\"#5C63AB\""
      ],
      [
        "d=\"m128 0 37 126 17 95h17L182 0z\" fill=\"#997659\"",
        "d=\"M112 0c2 66 1 101 1 107-1 6-4 46-26 116h18c29-67 39-107 42-116 4-9 14-44 28-107h-63Z\" fill=\"#B28B67\"",
        "d=\"M127 0c10 43 26 113 50 208h25c2-98-6-162-20-208h-55Z\" fill=\"#69A1AC\"",
        "d=\"M111 0c3 66-4 130-24 209h27c30-66 51-130 65-209h-68Z\" fill=\"#89C5CC\"",
        "d=\"m84 236 1-16c6 2 13 1 22-2 9 7 21 11 35 14a2 2 0 0 1 2 2l-1 5H86l-2-3Zm94 0 1-16c6 2 13 1 22-2 9 7 21 11 35 14a2 2 0 0 1 2 2l-1 5h-57l-2-3Z\" fill=\"#191847\""
      ]
    ],
    [
      [
        "d=\"m191 92 32 24c8 2 16 5 21 8 2 2 3 4-2 4-6-1-12-1-13 1s3 4 1 7c-1 2-6-3-15-13l-31-13 7-18ZM68 93h21l-21 66c-2 6 3 15 5 20-7 3-6-9-15-5-8 4-14 11-23 5-1-1-2-3 1-5 7-5 18-14 19-17 2-4 7-25 13-64Z\" fill=\"#B28B67\"",
        "d=\"m128 5 8-1c32 28 46 81 85 109l-10 12c-68-9-85-74-83-120Z\" fill=\"#E87613\"",
        "d=\"M90 114h77c3 0 2-5 2-8-6-29-29-61-29-103l-22-3c-18 29-24 66-28 114Z\" fill=\"#DDE3E9\"",
        "d=\"M91 29c-4-1-6-3-8-7-8-14-5-22 3-25 9-2 17 3 31 3h2l6 1c20 67 26 112 17 134H82l-11 21H55c-2-50 10-92 36-127Z\" fill=\"#FF9B21\"",
        "d=\"M95 100c2 16 5 28 9 35H82l13-35Z\""
      ],
      [
        "d=\"m198 78 36-16c7-7 13-11 19-15 1 0 4 0 1 4-3 5-6 10-5 12 1 1 5 0 7 2 1 2-6 4-19 7l-27 20-12-14ZM52 82l20 4-33 61c-4 5 0 15 1 20-7 2-5-9-14-7-8 2-15 7-23 0-1-1-2-4 1-5 9-4 21-10 23-13s11-23 25-60Z\" fill=\"#B28B67\"",
        "d=\"m128 5 8-1c19 18 27 62 39 68 12 5 29 0 49-7l6 14c-18 19-57 36-72 26-25-15-31-69-30-100Z\" fill=\"#DB2721\"",
        "d=\"M90 114h77c3 0 2-5 2-8-6-29-29-61-29-103l-22-3c-18 29-24 66-28 114Z\" fill=\"#DDE3E9\"",
        "d=\"M82 84c-15 28-28 49-39 61l-16-3C37 78 67 31 117 0h8c20 68 26 113 17 135H73c1-16 5-34 9-51Z\" fill=\"#FF4133\""
      ],
      [
        "d=\"m194 89 28 28c9 3 15 7 21 11 1 2 2 5-3 3-6-1-12-2-13 0s2 4 0 7c-1 1-6-4-13-15l-29-18 9-16ZM68 93h21l-21 66c-2 6 3 15 5 20-7 3-6-9-15-5-8 4-14 11-23 5-1-1-2-3 1-5 7-5 18-14 19-17 2-4 7-25 13-64Z\" fill=\"#B28B67\"",
        "d=\"m128 5 8-1c15 37 41 71 78 101l-28 34c-37-43-60-88-58-134Z\" fill=\"#191847\"",
        "d=\"M90 114h77c-18-43-27-80-27-111l-23-3C99 29 94 66 90 114Z\" fill=\"#DDE3E9\"",
        "d=\"M117 0h9l6 16 10 119H92l1 12H55C61 84 81 35 117 0Z\" fill=\"#2F3676\"",
        "d=\"M95 82c2 26 5 43 11 53H92c-1-18 0-36 3-53Z\"",
        "d=\"m103 104 25-12v12z\" fill=\"#FFF\""
      ],
      [
        "d=\"m190 89 31 25 21 10c1 2 2 4-3 4-6-1-12-2-13 0s3 4 1 7c-1 2-6-3-14-14l-31-15 8-17ZM54 78l17 2-30 66c-3 5 0 14 2 19-7 2-5-9-14-6-8 2-15 8-24 1-1 0-1-3 2-5 8-4 20-11 21-14 3-3 11-25 26-63Z\" fill=\"#B28B67\"",
        "d=\"m128 5 11-3c15 37 37 73 74 103l-9 16c-33-19-64-34-76-63-5-10-1-41 0-53Z\" fill=\"#C5CFD6\"",
        "d=\"M90 110c31 3 56 3 74 0 2 0 3-4 2-7-16-39-27-74-27-101h-16c-20 29-29 61-33 108Z\" fill=\"#323337\"",
        "d=\"M118 0h8c2 11 8 165 27 216H51c3-47 20-102 38-148-16 14-30 38-41 72l-19-5A209 209 0 0 1 117 0l1-1v1Z\" fill=\"#DDE3E9\""
      ],
      [
        "d=\"m192 65 39-5 22-9c2 0 5 1 1 4-5 4-9 8-8 10 0 2 4 1 5 4 1 2-6 3-20 1l-32 13-7-18ZM68 74l22 1-38 84c-2 6 3 15 5 20-7 3-6-9-15-5-8 4-14 11-23 5-1-1-2-3 1-5 7-5 18-14 19-17l29-83Z\" fill=\"#997659\"",
        "d=\"m128 5 17 1c4 38 27 62 79 54l7 49c-48 7-91-13-99-65-3-13-4-27-4-39Z\" fill=\"#AFB9C5\"",
        "d=\"m119 0 26 6c0 45 15 73 22 106H97l-2 35H42C54 84 79 35 118 0h1Z\" fill=\"#C5CFD6\"",
        "d=\"M108 48c-2 28-1 49 3 64H97c2-22 5-44 11-64Z\""
      ],
      [
        "d=\"m159 43 34-19 17-16c2-1 5-1 2 4-2 5-5 10-4 11 2 2 5 0 7 2 1 2-5 5-18 8l-26 23-12-13Zm54 16 15-9c2-8 5-12 8-12 2-1-2 9 3 8 4 0 14-8 16-7 3 3 1 10-2 13-6 7-10 10-21 13-5 1-12 4-18 9l-1-15Z\" fill=\"#997659\"",
        "d=\"M142 38c12 0 28-2 45-13l7 15c-12 12-29 22-43 21-12 0-18-14-9-23Z\" fill=\"#2026A2\"",
        "d=\"M158 63c13 3 35-1 65-12 8 16 11 27 10 34-26 13-48 19-66 20 0 11-1 21-6 31-9 19-62 1-81 5-11-37 11-52 11-76 0-25 21-65 24-65h28c1 20 9 41 15 63Z\" fill=\"#1F28CF\""
      ],
      [
        "d=\"m191 2 38-11c7-6 14-10 20-12 2 0 5 0 1 4-3 4-7 9-6 11s5 0 6 3c1 2-6 3-19 4l-30 17-10-16Zm-3 67 32 24c9 2 16 5 22 8 1 2 3 4-3 4-6-1-12-1-12 1-1 2 2 4 1 7-1 2-6-3-15-13l-32-13 7-18Z\" fill=\"#B28B67\"",
        "d=\"M139 6c17 32 42 57 78 83l-13 16c-41-15-62-25-73-55-3-8-4-32-6-45l14 1Z\" fill=\"#2026A2\"",
        "d=\"M90 114h77c-17-53-26-90-27-110l-2-2c-6 2-13 1-20-2-18 29-24 66-28 114Z\" fill=\"#F2F2F2\"",
        "d=\"M125 0c22 0 58 4 99-9l4 20c-31 20-63 36-91 34 13 51 12 94-15 94H81C75 95 92 34 108 3c0-1 2-3 5-3h12Z\" fill=\"#1F28CF\""
      ],
      [
        "d=\"m111 2 1-2h1l28 4c0 16 13 31 21 43 12 20 34 42 20 71-13 27-46 31-99 13 0-14 11-28 12-46 0-16 3-66 16-83Z\" fill=\"#C1DEE2\"",
        "d=\"m146 111 4-20c14 17 23 26 25 26 5 0 8-3 9-2 1 4-3 15-11 17-4 1-10-7-13-10l-14-11Zm26-52c3 0 6 2 8 5s4 19 1 19c-4 0-19-6-19-10s10-6 10-9-4-5 0-5Z\" fill=\"#B28B67\"",
        "d=\"m138 125-1 3C94 97 94 60 107 19c-10 41-6 75 31 106Z\""
      ],
      [
        "d=\"m196 85 32 24c8 2 16 5 21 8 2 2 4 4-2 4-6-1-12-1-13 1 0 2 3 4 1 7-1 2-6-3-15-13l-31-13 7-18ZM52 75l17 4-33 64c-3 5 0 15 2 20-8 1-5-10-14-7-9 2-16 8-24 0 0 0-1-3 2-5 8-3 20-10 22-13 3-3 12-24 28-63Z\" fill=\"#B28B67\"",
        "d=\"M203 88c4-1 9 0 14 2a4 4 0 0 1 0 8l2 2-8 17c-33-17-65-30-80-58-5-9-3-41-3-53l10-4c15 31 35 60 65 86Z\" fill=\"#69A1AC\"",
        "d=\"M90 114c31 3 56 3 74 0 2-1 2-10 1-13-16-41-26-71-26-99h-16c-20 30-29 63-33 112Z\" fill=\"#191847\"",
        "d=\"m84 119-1-4v-3c1-2 2-4 4-4l1-4c2-13-1-25-1-37-16 14-31 37-43 71l-19-6 2-8c-2-1-5-7-3-7l6-3C47 62 76 24 115 0h11c-3 44 43 141 27 224-29 6-72-14-113 2 1-33 32-72 44-107Z\" fill=\"#89C5CC\"",
        "d=\"m119 1-5 16 10 12-9 9 23 39-28-39 9-9-9-11z\"",
        "d=\"M131 92a4 4 0 1 1 0-8 4 4 0 0 1 0 8Zm5 23a4 4 0 1 1 0-8 4 4 0 0 1 0 8Zm1 23a4 4 0 1 1 0-8 4 4 0 0 1 0 8Z\""
      ],
      [
        "d=\"m199 92 29 28c8 4 15 7 20 12 1 1 3 4-3 3-6-2-12-3-13-1s2 5 1 7c-2 2-6-3-13-15l-30-17 9-17ZM61 67l22 1-27 84c-2 6 3 15 5 20-7 3-6-9-15-5-8 4-14 11-23 5-1-1-2-3 1-5 7-5 18-14 19-17 2-4 8-32 18-83Z\" fill=\"#B28B67\"",
        "d=\"m128 5 8-1c14 48 84 81 88 99 2 6-3 10 0 12l-12 8c-2-2-6 2-14-1-9-3-70-60-70-117Z\" fill=\"#DB2721\"",
        "d=\"M142 12c-1 63 36 80 28 105-7 21-72 44-83 23-5-8-7-18-7-29l-7 22c-3 10-14 12-14 16l-14-4c1-6-6-8-4-21 8-55 30-95 67-120v-5c0-2 2-4 4-4l27 2c2 0 4 2 4 4l-1 11Z\" fill=\"#FF4133\""
      ]
    ]
  ],
  "numDeployments": 3,
  "solcInputHash": "ac23bb6a25e31cd1da1e71d31d8611fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"string[][]\",\"name\":\"_hairs\",\"type\":\"string[][]\"},{\"internalType\":\"string[][]\",\"name\":\"_legs\",\"type\":\"string[][]\"},{\"internalType\":\"string[][]\",\"name\":\"_bodies\",\"type\":\"string[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"CreatedSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"CreatedUnfinishedSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bodies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finishMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"}],\"name\":\"formatTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hairs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"legs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBodies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLegs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Humaaans.sol\":\"Humaaans\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/Humaaans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HumanSVGGenerator.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Humaaans is\\n    ERC721URIStorage,\\n    VRFConsumerBase,\\n    HumanSVGGenerator,\\n    Ownable\\n{\\n    uint256 public tokenCounter;\\n    uint256 public immutable maxTokens;\\n\\n    event CreatedSVG(uint256 indexed tokenId, string tokenURI);\\n    event CreatedUnfinishedSVG(uint256 indexed tokenId, uint256 randomNumber);\\n    event RequestedRandomNumber(\\n        bytes32 indexed requestId,\\n        uint256 indexed tokenId\\n    );\\n    mapping(bytes32 => address) public requestIdToSender;\\n    mapping(uint256 => uint256) public tokenIdToRandomNumber;\\n    mapping(bytes32 => uint256) public requestIdToTokenId;\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n\\n    constructor(\\n        address _VRFCoordinator,\\n        address _LinkToken,\\n        bytes32 _keyhash,\\n        uint256 _fee,\\n        string[][] memory _hairs,\\n        string[][] memory _legs,\\n        string[][] memory _bodies\\n    )\\n        VRFConsumerBase(_VRFCoordinator, _LinkToken)\\n        ERC721(\\\"Humaaans\\\", \\\"HMN\\\")\\n        HumanSVGGenerator(_hairs, _legs, _bodies)\\n    {\\n        tokenCounter = 0;\\n        keyHash = _keyhash;\\n        fee = _fee;\\n        maxTokens = maxHairs * maxLegs * maxBodies;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function create() public returns (bytes32 requestId) {\\n        require(tokenCounter < maxTokens, \\\"All Humaaans were already minted\\\");\\n        requestId = requestRandomness(keyHash, fee);\\n        requestIdToSender[requestId] = msg.sender;\\n        uint256 tokenId = tokenCounter;\\n        requestIdToTokenId[requestId] = tokenId;\\n        tokenCounter = tokenCounter + 1;\\n        emit RequestedRandomNumber(requestId, tokenId);\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomNumber)\\n        internal\\n        override\\n    {\\n        address nftOwner = requestIdToSender[requestId];\\n        uint256 tokenId = requestIdToTokenId[requestId];\\n        _safeMint(nftOwner, tokenId);\\n        tokenIdToRandomNumber[tokenId] = randomNumber;\\n        emit CreatedUnfinishedSVG(tokenId, randomNumber);\\n    }\\n\\n    function finishMint(uint256 tokenId) public {\\n        require(\\n            bytes(tokenURI(tokenId)).length <= 0,\\n            \\\"tokenURI is already set!\\\"\\n        );\\n        require(tokenCounter > tokenId, \\\"TokenId has not been minted yet!\\\");\\n        require(\\n            tokenIdToRandomNumber[tokenId] > 0,\\n            \\\"Need to wait for the Chainlink node to respond!\\\"\\n        );\\n        uint256 randomNumber = tokenIdToRandomNumber[tokenId];\\n        string memory svg = generateHumanSVG(randomNumber);\\n        string memory imageURI = svgToImageURI(svg);\\n        _setTokenURI(tokenId, formatTokenURI(imageURI));\\n        emit CreatedSVG(tokenId, svg);\\n    }\\n\\n    function svgToImageURI(string memory svg)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\n        string memory svgBase64Encoded = Base64.encode(\\n            bytes(string(abi.encodePacked(svg)))\\n        );\\n        return string(abi.encodePacked(baseURL, svgBase64Encoded));\\n    }\\n\\n    function formatTokenURI(string memory imageURI)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                \\\"Humaaan\\\",\\n                                tokenCounter,\\n                                '\\\", \\\"description\\\":\\\"Randomly generated on-chain Humaaan\\\", \\\"attributes\\\":\\\"\\\", \\\"image\\\":\\\"',\\n                                imageURI,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf1e7a7b6d56d153ecf2f29e1bd8eff134696eb86dd5d13102a9f313f04642fa6\",\"license\":\"MIT\"},\"contracts/HumanSVGGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract HumanSVGGenerator {\\n    string[][] public hairs;\\n    string[][] public legs;\\n    string[][] public bodies;\\n\\n    bool[][][] public alreadyMinted;\\n\\n    uint256 public maxHairs;\\n    uint256 public maxLegs;\\n    uint256 public maxBodies;\\n\\n    constructor(\\n        string[][] memory _hairs,\\n        string[][] memory _legs,\\n        string[][] memory _bodies\\n    ) {\\n        hairs = _hairs;\\n        bodies = _bodies;\\n        legs = _legs;\\n        maxHairs = hairs.length;\\n        maxLegs = legs.length;\\n        maxBodies = bodies.length;\\n    }\\n\\n    function generateHumanSVG(uint256 _randomness)\\n        internal\\n        view\\n        returns (string memory humanSvg)\\n    {\\n        uint256 hairRandom = uint256(\\n            keccak256(abi.encode(_randomness, \\\"hairs\\\"))\\n        ) % maxHairs;\\n        uint256 legRandom = uint256(\\n            keccak256(abi.encode(_randomness, \\\"legs\\\"))\\n        ) % maxLegs;\\n        uint256 bodyRandom = uint256(\\n            keccak256(abi.encode(_randomness, \\\"bodies\\\"))\\n        ) % maxBodies;\\n\\n        // require(\\n        //     !alreadyMinted[hairRandom][legRandom][bodyRandom],\\n        //     \\\"Humaaan already exists\\\"\\n        // );\\n        humanSvg = string(\\n            abi.encodePacked(\\n                \\\"<svg width='380' height='480' xmlns='http://www.w3.org/2000/svg'>\\\",\\n                \\\"<g transform='translate(43 35)' fill='none' fill-rule='evenodd'>\\\",\\n                \\\"<g transform='translate(82 -7)'>\\\",\\n                // HEAD\\n                \\\"<path d='M62 65c-4-5-7-12-7-19 2-21 31-17 37-6s5 38-2 40c-3 1-10-1-16-5l4 29H54l8-39Z' fill='#B28B67'/>\\\",\\n                // HAIR\\n                generateBodyPart(hairs[hairRandom]),\\n                \\\"</g>\\\",\\n                // LEG\\n                \\\"<g transform='translate(0 187)'>\\\",\\n                generateBodyPart(legs[legRandom]),\\n                \\\"</g>\\\",\\n                // BODY\\n                \\\"<g transform='translate(22 82)'>\\\",\\n                generateBodyPart(bodies[bodyRandom]),\\n                \\\"</g>\\\",\\n                \\\"</g>\\\",\\n                \\\"</svg>\\\"\\n            )\\n        );\\n    }\\n\\n    function generateBodyPart(string[] memory _bodyPart)\\n        private\\n        pure\\n        returns (string memory finalParts)\\n    {\\n        for (uint8 pathIndex = 0; pathIndex < _bodyPart.length; pathIndex++) {\\n            finalParts = string(\\n                abi.encodePacked(\\n                    finalParts,\\n                    string(\\n                        abi.encodePacked(\\\"<path \\\", _bodyPart[pathIndex], \\\"/>\\\")\\n                    )\\n                )\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52dfc371cfbbca0319fe385d60d28193e9e8f8a82a534e4e12a55e5ff26b29e2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162005f3038038062005f30833981810160405281019062000037919062000709565b82828289896040518060400160405280600881526020017f48756d6161616e730000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f484d4e00000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000c0929190620002f7565b508060019080519060200190620000d9929190620002f7565b5050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505082600890805190602001906200016492919062000388565b5080600a90805190602001906200017d92919062000388565b5081600990805190602001906200019692919062000388565b50600880549050600c81905550600980549050600d81905550600a80549050600e81905550505050620001de620001d26200022960201b60201c565b6200023160201b60201c565b60006010819055508460148190555083601581905550600e54600d54600c54620002099190620008be565b620002159190620008be565b60c081815250505050505050505062000af5565b600033905090565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805462000305906200099d565b90600052602060002090601f01602090048101928262000329576000855562000375565b82601f106200034457805160ff191683800117855562000375565b8280016001018555821562000375579182015b828111156200037457825182559160200191906001019062000357565b5b509050620003849190620003ef565b5090565b828054828255906000526020600020908101928215620003dc579160200282015b82811115620003db578251829080519060200190620003ca9291906200040e565b5091602001919060010190620003a9565b5b509050620003eb919062000475565b5090565b5b808211156200040a576000816000905550600101620003f0565b5090565b82805482825590600052602060002090810192821562000462579160200282015b828111156200046157825182908051906020019062000450929190620002f7565b50916020019190600101906200042f565b5b5090506200047191906200049d565b5090565b5b808211156200049957600081816200048f9190620004c5565b5060010162000476565b5090565b5b80821115620004c15760008181620004b79190620004e8565b506001016200049e565b5090565b5080546000825590600052602060002090810190620004e591906200049d565b50565b508054620004f6906200099d565b6000825580601f106200050a57506200052b565b601f0160209004906000526020600020908101906200052a9190620003ef565b5b50565b6000620005456200053f846200082a565b62000801565b9050808382526020820190508260005b858110156200058957815185016200056e888262000681565b84526020840193506020830192505060018101905062000555565b5050509392505050565b6000620005aa620005a48462000859565b62000801565b9050808382526020820190508260005b85811015620005ee5781518501620005d38882620006c5565b845260208401935060208301925050600181019050620005ba565b5050509392505050565b60006200060f620006098462000888565b62000801565b9050828152602081018484840111156200062857600080fd5b6200063584828562000967565b509392505050565b6000815190506200064e8162000aa7565b92915050565b600082601f8301126200066657600080fd5b8151620006788482602086016200052e565b91505092915050565b600082601f8301126200069357600080fd5b8151620006a584826020860162000593565b91505092915050565b600081519050620006bf8162000ac1565b92915050565b600082601f830112620006d757600080fd5b8151620006e9848260208601620005f8565b91505092915050565b600081519050620007038162000adb565b92915050565b600080600080600080600060e0888a0312156200072557600080fd5b6000620007358a828b016200063d565b9750506020620007488a828b016200063d565b96505060406200075b8a828b01620006ae565b95505060606200076e8a828b01620006f2565b945050608088015167ffffffffffffffff8111156200078c57600080fd5b6200079a8a828b0162000654565b93505060a088015167ffffffffffffffff811115620007b857600080fd5b620007c68a828b0162000654565b92505060c088015167ffffffffffffffff811115620007e457600080fd5b620007f28a828b0162000654565b91505092959891949750929550565b60006200080d62000820565b90506200081b8282620009d3565b919050565b6000604051905090565b600067ffffffffffffffff82111562000848576200084762000a67565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000877576200087662000a67565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620008a657620008a562000a67565b5b620008b18262000a96565b9050602081019050919050565b6000620008cb826200095d565b9150620008d8836200095d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000914576200091362000a09565b5b828202905092915050565b60006200092c826200093d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620009875780820151818401526020810190506200096a565b8381111562000997576000848401525b50505050565b60006002820490506001821680620009b657607f821691505b60208210811415620009cd57620009cc62000a38565b5b50919050565b620009de8262000a96565b810181811067ffffffffffffffff8211171562000a0057620009ff62000a67565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000ab2816200091f565b811462000abe57600080fd5b50565b62000acc8162000933565b811462000ad857600080fd5b50565b62000ae6816200095d565b811462000af257600080fd5b50565b60805160601c60a05160601c60c0516153f762000b39600039600081816116ad015261176701526000818161119901526129ac0152600061297001526153f76000f3fe6080604052600436106101f95760003560e01c806394985ddd1161010d578063ba135698116100a0578063e83157421161006f578063e831574214610784578063e985e9c5146107af578063efc81a8c146107ec578063f2fde38b14610817578063f38c76b314610840576101f9565b8063ba135698146106b4578063bf01c3e3146106f1578063c87b56dd1461071c578063d082e38114610759576101f9565b8063a3130470116100dc578063a3130470146105e6578063b4e69d7f14610623578063b70256af1461064e578063b88d4fde1461068b576101f9565b806394985ddd1461052c57806395d89b41146105555780639c1cd79514610580578063a22cb465146105bd576101f9565b806330d871c6116101905780636352211e1161015f5780636352211e1461043357806370a0823114610470578063715018a6146104ad57806371aee193146104c45780638da5cb5b14610501576101f9565b806330d871c61461039a5780633ccfd60b146103d757806342842e0e146103e1578063624194c71461040a576101f9565b8063219c0eee116101cc578063219c0eee146102cc57806322881f881461030957806323b872dd146103465780632c1db4721461036f576101f9565b806301ffc9a7146101fe57806306fdde031461023b578063081812fc14610266578063095ea7b3146102a3575b600080fd5b34801561020a57600080fd5b50610225600480360381019061022091906135ec565b61087d565b6040516102329190614034565b60405180910390f35b34801561024757600080fd5b5061025061095f565b60405161025d91906140d8565b60405180910390f35b34801561027257600080fd5b5061028d6004803603810190610288919061367f565b6109f1565b60405161029a9190613f8f565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190613522565b610a76565b005b3480156102d857600080fd5b506102f360048036038101906102ee9190613587565b610b8e565b6040516103009190613f8f565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b9190613587565b610bc1565b60405161033d91906143da565b60405180910390f35b34801561035257600080fd5b5061036d6004803603810190610368919061341c565b610bd9565b005b34801561037b57600080fd5b50610384610c39565b60405161039191906143da565b60405180910390f35b3480156103a657600080fd5b506103c160048036038101906103bc919061363e565b610c3f565b6040516103ce91906140d8565b60405180910390f35b6103df610cd2565b005b3480156103ed57600080fd5b506104086004803603810190610403919061341c565b610d9e565b005b34801561041657600080fd5b50610431600480360381019061042c919061367f565b610dbe565b005b34801561043f57600080fd5b5061045a6004803603810190610455919061367f565b610f27565b6040516104679190613f8f565b60405180910390f35b34801561047c57600080fd5b50610497600480360381019061049291906133b7565b610fd9565b6040516104a491906143da565b60405180910390f35b3480156104b957600080fd5b506104c2611091565b005b3480156104d057600080fd5b506104eb60048036038101906104e6919061363e565b611119565b6040516104f891906140d8565b60405180910390f35b34801561050d57600080fd5b5061051661116d565b6040516105239190613f8f565b60405180910390f35b34801561053857600080fd5b50610553600480360381019061054e91906135b0565b611197565b005b34801561056157600080fd5b5061056a611233565b60405161057791906140d8565b60405180910390f35b34801561058c57600080fd5b506105a760048036038101906105a2919061367f565b6112c5565b6040516105b491906143da565b60405180910390f35b3480156105c957600080fd5b506105e460048036038101906105df91906134e6565b6112dd565b005b3480156105f257600080fd5b5061060d600480360381019061060891906136a8565b6112f3565b60405161061a91906140d8565b60405180910390f35b34801561062f57600080fd5b506106386113b8565b60405161064591906143da565b60405180910390f35b34801561065a57600080fd5b50610675600480360381019061067091906136a8565b6113be565b60405161068291906140d8565b60405180910390f35b34801561069757600080fd5b506106b260048036038101906106ad919061346b565b611483565b005b3480156106c057600080fd5b506106db60048036038101906106d691906136e4565b6114e5565b6040516106e89190614034565b60405180910390f35b3480156106fd57600080fd5b5061070661154d565b60405161071391906143da565b60405180910390f35b34801561072857600080fd5b50610743600480360381019061073e919061367f565b611553565b60405161075091906140d8565b60405180910390f35b34801561076557600080fd5b5061076e6116a5565b60405161077b91906143da565b60405180910390f35b34801561079057600080fd5b506107996116ab565b6040516107a691906143da565b60405180910390f35b3480156107bb57600080fd5b506107d660048036038101906107d191906133e0565b6116cf565b6040516107e39190614034565b60405180910390f35b3480156107f857600080fd5b50610801611763565b60405161080e919061404f565b60405180910390f35b34801561082357600080fd5b5061083e600480360381019061083991906133b7565b611891565b005b34801561084c57600080fd5b50610867600480360381019061086291906136a8565b611989565b60405161087491906140d8565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061094857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610958575061095782611a4e565b5b9050919050565b60606000805461096e9061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461099a9061472b565b80156109e75780601f106109bc576101008083540402835291602001916109e7565b820191906000526020600020905b8154815290600101906020018083116109ca57829003601f168201915b5050505050905090565b60006109fc82611ab8565b610a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a329061431a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a8182610f27565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae99061439a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b11611b24565b73ffffffffffffffffffffffffffffffffffffffff161480610b405750610b3f81610b3a611b24565b6116cf565b5b610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b769061423a565b60405180910390fd5b610b898383611b2c565b505050565b60116020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60136020528060005260406000206000915090505481565b610bea610be4611b24565b82611be5565b610c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c20906143ba565b60405180910390fd5b610c34838383611cc3565b505050565b600e5481565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610ca584604051602001610c919190613e07565b604051602081830303815290604052611f2a565b90508181604051602001610cba929190613e1e565b60405160208183030381529060405292505050919050565b610cda611b24565b73ffffffffffffffffffffffffffffffffffffffff16610cf861116d565b73ffffffffffffffffffffffffffffffffffffffff1614610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d459061433a565b60405180910390fd5b610d5661116d565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610d9b573d6000803e3d6000fd5b50565b610db983838360405180602001604052806000815250611483565b505050565b6000610dc982611553565b511115610e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e02906141da565b60405180910390fd5b8060105411610e4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e46906142ba565b60405180910390fd5b6000601260008381526020019081526020016000205411610ea5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9c9061417a565b60405180910390fd5b6000601260008381526020019081526020016000205490506000610ec8826120c9565b90506000610ed582610c3f565b9050610ee984610ee483611119565b6124fb565b837fe6e1ae3c28fd225da5957e598f0f29b3ea720244d8fa8862aba7d2e7aac9cdec83604051610f1991906140d8565b60405180910390a250505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc79061427a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561104a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110419061425a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611099611b24565b73ffffffffffffffffffffffffffffffffffffffff166110b761116d565b73ffffffffffffffffffffffffffffffffffffffff161461110d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111049061433a565b60405180910390fd5b611117600061256f565b565b606061114760105483604051602001611133929190613eec565b604051602081830303815290604052611f2a565b6040516020016111579190613f6d565b6040516020818303038152906040529050919050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121c9061437a565b60405180910390fd5b61122f8282612635565b5050565b6060600180546112429061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461126e9061472b565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b5050505050905090565b60126020528060005260406000206000915090505481565b6112ef6112e8611b24565b83836126e5565b5050565b6009828154811061130357600080fd5b90600052602060002001818154811061131b57600080fd5b906000526020600020016000915091505080546113379061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546113639061472b565b80156113b05780601f10611385576101008083540402835291602001916113b0565b820191906000526020600020905b81548152906001019060200180831161139357829003601f168201915b505050505081565b600d5481565b600882815481106113ce57600080fd5b9060005260206000200181815481106113e657600080fd5b906000526020600020016000915091505080546114029061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461142e9061472b565b801561147b5780601f106114505761010080835404028352916020019161147b565b820191906000526020600020905b81548152906001019060200180831161145e57829003601f168201915b505050505081565b61149461148e611b24565b83611be5565b6114d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ca906143ba565b60405180910390fd5b6114df84848484612852565b50505050565b600b83815481106114f557600080fd5b90600052602060002001828154811061150d57600080fd5b90600052602060002001818154811061152557600080fd5b906000526020600020906020918282040191900692509250509054906101000a900460ff1681565b600c5481565b606061155e82611ab8565b61159d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611594906142fa565b60405180910390fd5b60006006600084815260200190815260200160002080546115bd9061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546115e99061472b565b80156116365780601f1061160b57610100808354040283529160200191611636565b820191906000526020600020905b81548152906001019060200180831161161957829003601f168201915b5050505050905060006116476128ae565b905060008151141561165d5781925050506116a0565b60008251111561169257808260405160200161167a929190613e1e565b604051602081830303815290604052925050506116a0565b61169b846128c5565b925050505b919050565b60105481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000601054106117c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c09061421a565b60405180910390fd5b6117d760145460155461296c565b9050336011600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601054905080601360008481526020019081526020016000208190555060016010546118599190614549565b60108190555080827fce39cc4270cfd628caca43c3d4ccbbf3e948a8aadd24d313a5c3d24f8d2e959060405160405180910390a35090565b611899611b24565b73ffffffffffffffffffffffffffffffffffffffff166118b761116d565b73ffffffffffffffffffffffffffffffffffffffff161461190d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119049061433a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561197d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119749061411a565b60405180910390fd5b6119868161256f565b50565b600a828154811061199957600080fd5b9060005260206000200181815481106119b157600080fd5b906000526020600020016000915091505080546119cd9061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546119f99061472b565b8015611a465780601f10611a1b57610100808354040283529160200191611a46565b820191906000526020600020905b815481529060010190602001808311611a2957829003601f168201915b505050505081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611b9f83610f27565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611bf082611ab8565b611c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c26906141fa565b60405180910390fd5b6000611c3a83610f27565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ca957508373ffffffffffffffffffffffffffffffffffffffff16611c91846109f1565b73ffffffffffffffffffffffffffffffffffffffff16145b80611cba5750611cb981856116cf565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ce382610f27565b73ffffffffffffffffffffffffffffffffffffffff1614611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d309061413a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da09061419a565b60405180910390fd5b611db4838383612ace565b611dbf600082611b2c565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e0f919061462a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e669190614549565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f25838383612ad3565b505050565b6060600082511415611f4d576040518060200160405280600081525090506120c4565b60006040518060600160405280604081526020016153826040913990506000600360028551611f7c9190614549565b611f86919061459f565b6004611f9291906145d0565b90506000602082611fa39190614549565b67ffffffffffffffff811115611fe2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120145781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612083576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612028565b60038951066001811461209d57600281146120ad576120b8565b613d3d60f01b60028303526120b8565b603d60f81b60018303525b50505050508093505050505b919050565b60606000600c54836040516020016120e19190614451565b6040516020818303038152906040528051906020012060001c6121049190614815565b90506000600d548460405160200161211c9190614423565b6040516020818303038152906040528051906020012060001c61213f9190614815565b90506000600e548560405160200161215791906143f5565b6040516020818303038152906040528051906020012060001c61217a9190614815565b9050612298600884815481106121b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561228f5783829060005260206000200180546122029061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461222e9061472b565b801561227b5780601f106122505761010080835404028352916020019161227b565b820191906000526020600020905b81548152906001019060200180831161225e57829003601f168201915b5050505050815260200190600101906121e3565b50505050612ad8565b6123b4600984815481106122d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156123ab57838290600052602060002001805461231e9061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461234a9061472b565b80156123975780601f1061236c57610100808354040283529160200191612397565b820191906000526020600020905b81548152906001019060200180831161237a57829003601f168201915b5050505050815260200190600101906122ff565b50505050612ad8565b6124d0600a84815481106123f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156124c757838290600052602060002001805461243a9061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546124669061472b565b80156124b35780601f10612488576101008083540402835291602001916124b3565b820191906000526020600020905b81548152906001019060200180831161249657829003601f168201915b50505050508152602001906001019061241b565b50505050612ad8565b6040516020016124e293929190613e42565b6040516020818303038152906040529350505050919050565b61250482611ab8565b612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a9061429a565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061256a9291906131b1565b505050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006011600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006013600085815260200190815260200160002054905061268f8282612b88565b826012600083815260200190815260200160002081905550807fc58c9f48f62f00d6dbb43335e84043f12dbf76dc70abcdd19909664404ca788c846040516126d791906143da565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274b906141ba565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516128459190614034565b60405180910390a3505050565b61285d848484611cc3565b61286984848484612ba6565b6128a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289f906140fa565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606128d082611ab8565b61290f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129069061435a565b60405180910390fd5b60006129196128ae565b905060008151116129395760405180602001604052806000815250612964565b8061294384612d3d565b604051602001612954929190613e1e565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016129e092919061406a565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401612a0d93929190613ff6565b602060405180830381600087803b158015612a2757600080fd5b505af1158015612a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5f919061355e565b506000612a82846000306007600089815260200190815260200160002054612eea565b905060016007600086815260200190815260200160002054612aa49190614549565b6007600086815260200190815260200160002081905550612ac58482612f26565b91505092915050565b505050565b505050565b606060005b82518160ff161015612b825781838260ff1681518110612b26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604051602001612b3e9190613f40565b604051602081830303815290604052604051602001612b5e929190613e1e565b60405160208183030381529060405291508080612b7a906147d7565b915050612add565b50919050565b612ba2828260405180602001604052806000815250612f59565b5050565b6000612bc78473ffffffffffffffffffffffffffffffffffffffff16612fb4565b15612d30578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612bf0611b24565b8786866040518563ffffffff1660e01b8152600401612c129493929190613faa565b602060405180830381600087803b158015612c2c57600080fd5b505af1925050508015612c5d57506040513d601f19601f82011682018060405250810190612c5a9190613615565b60015b612ce0573d8060008114612c8d576040519150601f19603f3d011682016040523d82523d6000602084013e612c92565b606091505b50600081511415612cd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ccf906140fa565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d35565b600190505b949350505050565b60606000821415612d85576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ee5565b600082905060005b60008214612db7578080612da09061478e565b915050600a82612db0919061459f565b9150612d8d565b60008167ffffffffffffffff811115612df9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e2b5781602001600182028036833780820191505090505b5090505b60008514612ede57600182612e44919061462a565b9150600a85612e539190614815565b6030612e5f9190614549565b60f81b818381518110612e9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612ed7919061459f565b9450612e2f565b8093505050505b919050565b600084848484604051602001612f039493929190614093565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001612f3b929190613ddb565b60405160208183030381529060405280519060200120905092915050565b612f638383612fd7565b612f706000848484612ba6565b612faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa6906140fa565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303e906142da565b60405180910390fd5b61305081611ab8565b15613090576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130879061415a565b60405180910390fd5b61309c60008383612ace565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130ec9190614549565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46131ad60008383612ad3565b5050565b8280546131bd9061472b565b90600052602060002090601f0160209004810192826131df5760008555613226565b82601f106131f857805160ff1916838001178555613226565b82800160010185558215613226579182015b8281111561322557825182559160200191906001019061320a565b5b5090506132339190613237565b5090565b5b80821115613250576000816000905550600101613238565b5090565b6000613267613262846144a4565b61447f565b90508281526020810184848401111561327f57600080fd5b61328a8482856146e9565b509392505050565b60006132a56132a0846144d5565b61447f565b9050828152602081018484840111156132bd57600080fd5b6132c88482856146e9565b509392505050565b6000813590506132df8161530e565b92915050565b6000813590506132f481615325565b92915050565b60008151905061330981615325565b92915050565b60008135905061331e8161533c565b92915050565b60008135905061333381615353565b92915050565b60008151905061334881615353565b92915050565b600082601f83011261335f57600080fd5b813561336f848260208601613254565b91505092915050565b600082601f83011261338957600080fd5b8135613399848260208601613292565b91505092915050565b6000813590506133b18161536a565b92915050565b6000602082840312156133c957600080fd5b60006133d7848285016132d0565b91505092915050565b600080604083850312156133f357600080fd5b6000613401858286016132d0565b9250506020613412858286016132d0565b9150509250929050565b60008060006060848603121561343157600080fd5b600061343f868287016132d0565b9350506020613450868287016132d0565b9250506040613461868287016133a2565b9150509250925092565b6000806000806080858703121561348157600080fd5b600061348f878288016132d0565b94505060206134a0878288016132d0565b93505060406134b1878288016133a2565b925050606085013567ffffffffffffffff8111156134ce57600080fd5b6134da8782880161334e565b91505092959194509250565b600080604083850312156134f957600080fd5b6000613507858286016132d0565b9250506020613518858286016132e5565b9150509250929050565b6000806040838503121561353557600080fd5b6000613543858286016132d0565b9250506020613554858286016133a2565b9150509250929050565b60006020828403121561357057600080fd5b600061357e848285016132fa565b91505092915050565b60006020828403121561359957600080fd5b60006135a78482850161330f565b91505092915050565b600080604083850312156135c357600080fd5b60006135d18582860161330f565b92505060206135e2858286016133a2565b9150509250929050565b6000602082840312156135fe57600080fd5b600061360c84828501613324565b91505092915050565b60006020828403121561362757600080fd5b600061363584828501613339565b91505092915050565b60006020828403121561365057600080fd5b600082013567ffffffffffffffff81111561366a57600080fd5b61367684828501613378565b91505092915050565b60006020828403121561369157600080fd5b600061369f848285016133a2565b91505092915050565b600080604083850312156136bb57600080fd5b60006136c9858286016133a2565b92505060206136da858286016133a2565b9150509250929050565b6000806000606084860312156136f957600080fd5b6000613707868287016133a2565b9350506020613718868287016133a2565b9250506040613729868287016133a2565b9150509250925092565b61373c8161465e565b82525050565b61374b81614670565b82525050565b61375a8161467c565b82525050565b61377161376c8261467c565b614801565b82525050565b600061378282614506565b61378c818561451c565b935061379c8185602086016146f8565b6137a581614902565b840191505092915050565b60006137bb82614511565b6137c5818561452d565b93506137d58185602086016146f8565b6137de81614902565b840191505092915050565b60006137f482614511565b6137fe818561453e565b935061380e8185602086016146f8565b80840191505092915050565b600061382760408361453e565b915061383282614913565b604082019050919050565b600061384a60418361453e565b915061385582614962565b604182019050919050565b600061386d60098361453e565b9150613878826149d7565b600982019050919050565b600061389060328361452d565b915061389b82614a00565b604082019050919050565b60006138b360268361452d565b91506138be82614a4f565b604082019050919050565b60006138d660258361452d565b91506138e182614a9e565b604082019050919050565b60006138f9601c8361452d565b915061390482614aed565b602082019050919050565b600061391c60068361453e565b915061392782614b16565b600682019050919050565b600061393f602f8361452d565b915061394a82614b3f565b604082019050919050565b600061396260248361452d565b915061396d82614b8e565b604082019050919050565b600061398560198361452d565b915061399082614bdd565b602082019050919050565b60006139a860068361452d565b91506139b382614c06565b602082019050919050565b60006139cb60188361452d565b91506139d682614c2f565b602082019050919050565b60006139ee602c8361452d565b91506139f982614c58565b604082019050919050565b6000613a1160208361452d565b9150613a1c82614ca7565b602082019050919050565b6000613a3460208361453e565b9150613a3f82614cd0565b602082019050919050565b6000613a5760078361453e565b9150613a6282614cf9565b600782019050919050565b6000613a7a60388361452d565b9150613a8582614d22565b604082019050919050565b6000613a9d602a8361452d565b9150613aa882614d71565b604082019050919050565b6000613ac060298361452d565b9150613acb82614dc0565b604082019050919050565b6000613ae3602e8361452d565b9150613aee82614e0f565b604082019050919050565b6000613b0660048361452d565b9150613b1182614e5e565b602082019050919050565b6000613b2960208361452d565b9150613b3482614e87565b602082019050919050565b6000613b4c60028361453e565b9150613b5782614eb0565b600282019050919050565b6000613b6f60208361452d565b9150613b7a82614ed9565b602082019050919050565b6000613b9260318361452d565b9150613b9d82614f02565b604082019050919050565b6000613bb5602c8361452d565b9150613bc082614f51565b604082019050919050565b6000613bd860058361452d565b9150613be382614fa0565b602082019050919050565b6000613bfb60208361452d565b9150613c0682614fc9565b602082019050919050565b6000613c1e60528361453e565b9150613c2982614ff2565b605282019050919050565b6000613c41602f8361452d565b9150613c4c82615067565b604082019050919050565b6000613c6460048361453e565b9150613c6f826150b6565b600482019050919050565b6000613c87601f8361452d565b9150613c92826150df565b602082019050919050565b6000613caa60208361453e565b9150613cb582615108565b602082019050919050565b6000613ccd60218361452d565b9150613cd882615131565b604082019050919050565b6000613cf0601d8361453e565b9150613cfb82615180565b601d82019050919050565b6000613d1360208361453e565b9150613d1e826151a9565b602082019050919050565b6000613d3660318361452d565b9150613d41826151d2565b604082019050919050565b6000613d5960028361453e565b9150613d6482615221565b600282019050919050565b6000613d7c60068361453e565b9150613d878261524a565b600682019050919050565b6000613d9f60678361453e565b9150613daa82615273565b606782019050919050565b613dbe816146d2565b82525050565b613dd5613dd0826146d2565b61480b565b82525050565b6000613de78285613760565b602082019150613df78284613dc4565b6020820191508190509392505050565b6000613e1382846137e9565b915081905092915050565b6000613e2a82856137e9565b9150613e3682846137e9565b91508190509392505050565b6000613e4d8261383d565b9150613e588261381a565b9150613e6382613d06565b9150613e6e82613d92565b9150613e7a82866137e9565b9150613e8582613c57565b9150613e9082613c9d565b9150613e9c82856137e9565b9150613ea782613c57565b9150613eb282613a27565b9150613ebe82846137e9565b9150613ec982613c57565b9150613ed482613c57565b9150613edf82613d6f565b9150819050949350505050565b6000613ef782613860565b9150613f0282613a4a565b9150613f0e8285613dc4565b602082019150613f1d82613c11565b9150613f2982846137e9565b9150613f3482613b3f565b91508190509392505050565b6000613f4b8261390f565b9150613f5782846137e9565b9150613f6282613d4c565b915081905092915050565b6000613f7882613ce3565b9150613f8482846137e9565b915081905092915050565b6000602082019050613fa46000830184613733565b92915050565b6000608082019050613fbf6000830187613733565b613fcc6020830186613733565b613fd96040830185613db5565b8181036060830152613feb8184613777565b905095945050505050565b600060608201905061400b6000830186613733565b6140186020830185613db5565b818103604083015261402a8184613777565b9050949350505050565b60006020820190506140496000830184613742565b92915050565b60006020820190506140646000830184613751565b92915050565b600060408201905061407f6000830185613751565b61408c6020830184613db5565b9392505050565b60006080820190506140a86000830187613751565b6140b56020830186613db5565b6140c26040830185613733565b6140cf6060830184613db5565b95945050505050565b600060208201905081810360008301526140f281846137b0565b905092915050565b6000602082019050818103600083015261411381613883565b9050919050565b60006020820190508181036000830152614133816138a6565b9050919050565b60006020820190508181036000830152614153816138c9565b9050919050565b60006020820190508181036000830152614173816138ec565b9050919050565b6000602082019050818103600083015261419381613932565b9050919050565b600060208201905081810360008301526141b381613955565b9050919050565b600060208201905081810360008301526141d381613978565b9050919050565b600060208201905081810360008301526141f3816139be565b9050919050565b60006020820190508181036000830152614213816139e1565b9050919050565b6000602082019050818103600083015261423381613a04565b9050919050565b6000602082019050818103600083015261425381613a6d565b9050919050565b6000602082019050818103600083015261427381613a90565b9050919050565b6000602082019050818103600083015261429381613ab3565b9050919050565b600060208201905081810360008301526142b381613ad6565b9050919050565b600060208201905081810360008301526142d381613b1c565b9050919050565b600060208201905081810360008301526142f381613b62565b9050919050565b6000602082019050818103600083015261431381613b85565b9050919050565b6000602082019050818103600083015261433381613ba8565b9050919050565b6000602082019050818103600083015261435381613bee565b9050919050565b6000602082019050818103600083015261437381613c34565b9050919050565b6000602082019050818103600083015261439381613c7a565b9050919050565b600060208201905081810360008301526143b381613cc0565b9050919050565b600060208201905081810360008301526143d381613d29565b9050919050565b60006020820190506143ef6000830184613db5565b92915050565b600060408201905061440a6000830184613db5565b818103602083015261441b8161399b565b905092915050565b60006040820190506144386000830184613db5565b818103602083015261444981613af9565b905092915050565b60006040820190506144666000830184613db5565b818103602083015261447781613bcb565b905092915050565b600061448961449a565b9050614495828261475d565b919050565b6000604051905090565b600067ffffffffffffffff8211156144bf576144be6148d3565b5b6144c882614902565b9050602081019050919050565b600067ffffffffffffffff8211156144f0576144ef6148d3565b5b6144f982614902565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614554826146d2565b915061455f836146d2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561459457614593614846565b5b828201905092915050565b60006145aa826146d2565b91506145b5836146d2565b9250826145c5576145c4614875565b5b828204905092915050565b60006145db826146d2565b91506145e6836146d2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561461f5761461e614846565b5b828202905092915050565b6000614635826146d2565b9150614640836146d2565b92508282101561465357614652614846565b5b828203905092915050565b6000614669826146b2565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156147165780820151818401526020810190506146fb565b83811115614725576000848401525b50505050565b6000600282049050600182168061474357607f821691505b60208210811415614757576147566148a4565b5b50919050565b61476682614902565b810181811067ffffffffffffffff82111715614785576147846148d3565b5b80604052505050565b6000614799826146d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147cc576147cb614846565b5b600182019050919050565b60006147e2826146dc565b915060ff8214156147f6576147f5614846565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000614820826146d2565b915061482b836146d2565b92508261483b5761483a614875565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f3c67207472616e73666f726d3d277472616e736c61746528343320333529272060008201527f66696c6c3d276e6f6e65272066696c6c2d72756c653d276576656e6f6464273e602082015250565b7f3c7376672077696474683d2733383027206865696768743d273438302720786d60008201527f6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672760208201527f3e00000000000000000000000000000000000000000000000000000000000000604082015250565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f3c70617468200000000000000000000000000000000000000000000000000000600082015250565b7f4e65656420746f207761697420666f722074686520436861696e6c696e6b206e60008201527f6f646520746f20726573706f6e64210000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f626f646965730000000000000000000000000000000000000000000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574210000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f416c6c2048756d6161616e73207765726520616c7265616479206d696e746564600082015250565b7f3c67207472616e73666f726d3d277472616e736c61746528323220383229273e600082015250565b7f48756d6161616e00000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f6c65677300000000000000000000000000000000000000000000000000000000600082015250565b7f546f6b656e496420686173206e6f74206265656e206d696e7465642079657421600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f6861697273000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f222c20226465736372697074696f6e223a2252616e646f6d6c792067656e657260008201527f61746564206f6e2d636861696e2048756d6161616e222c20226174747269627560208201527f746573223a22222c2022696d616765223a220000000000000000000000000000604082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000600082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f3c67207472616e73666f726d3d277472616e736c61746528302031383729273e600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f3c67207472616e73666f726d3d277472616e736c617465283832202d3729273e600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f2f3e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f3c7061746820643d274d3632203635632d342d352d372d31322d372d3139203260008201527f2d32312033312d31372033372d3673352033382d32203430632d3320312d313060208201527f2d312d31362d356c342032394835346c382d33395a272066696c6c3d2723423260408201527f38423637272f3e00000000000000000000000000000000000000000000000000606082015250565b6153178161465e565b811461532257600080fd5b50565b61532e81614670565b811461533957600080fd5b50565b6153458161467c565b811461535057600080fd5b50565b61535c81614686565b811461536757600080fd5b50565b615373816146d2565b811461537e57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122067b0fd7d20a227be409c4e816e8823c2d88e62173faf4ee51735d84c7c5eb96a64736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c806394985ddd1161010d578063ba135698116100a0578063e83157421161006f578063e831574214610784578063e985e9c5146107af578063efc81a8c146107ec578063f2fde38b14610817578063f38c76b314610840576101f9565b8063ba135698146106b4578063bf01c3e3146106f1578063c87b56dd1461071c578063d082e38114610759576101f9565b8063a3130470116100dc578063a3130470146105e6578063b4e69d7f14610623578063b70256af1461064e578063b88d4fde1461068b576101f9565b806394985ddd1461052c57806395d89b41146105555780639c1cd79514610580578063a22cb465146105bd576101f9565b806330d871c6116101905780636352211e1161015f5780636352211e1461043357806370a0823114610470578063715018a6146104ad57806371aee193146104c45780638da5cb5b14610501576101f9565b806330d871c61461039a5780633ccfd60b146103d757806342842e0e146103e1578063624194c71461040a576101f9565b8063219c0eee116101cc578063219c0eee146102cc57806322881f881461030957806323b872dd146103465780632c1db4721461036f576101f9565b806301ffc9a7146101fe57806306fdde031461023b578063081812fc14610266578063095ea7b3146102a3575b600080fd5b34801561020a57600080fd5b50610225600480360381019061022091906135ec565b61087d565b6040516102329190614034565b60405180910390f35b34801561024757600080fd5b5061025061095f565b60405161025d91906140d8565b60405180910390f35b34801561027257600080fd5b5061028d6004803603810190610288919061367f565b6109f1565b60405161029a9190613f8f565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190613522565b610a76565b005b3480156102d857600080fd5b506102f360048036038101906102ee9190613587565b610b8e565b6040516103009190613f8f565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b9190613587565b610bc1565b60405161033d91906143da565b60405180910390f35b34801561035257600080fd5b5061036d6004803603810190610368919061341c565b610bd9565b005b34801561037b57600080fd5b50610384610c39565b60405161039191906143da565b60405180910390f35b3480156103a657600080fd5b506103c160048036038101906103bc919061363e565b610c3f565b6040516103ce91906140d8565b60405180910390f35b6103df610cd2565b005b3480156103ed57600080fd5b506104086004803603810190610403919061341c565b610d9e565b005b34801561041657600080fd5b50610431600480360381019061042c919061367f565b610dbe565b005b34801561043f57600080fd5b5061045a6004803603810190610455919061367f565b610f27565b6040516104679190613f8f565b60405180910390f35b34801561047c57600080fd5b50610497600480360381019061049291906133b7565b610fd9565b6040516104a491906143da565b60405180910390f35b3480156104b957600080fd5b506104c2611091565b005b3480156104d057600080fd5b506104eb60048036038101906104e6919061363e565b611119565b6040516104f891906140d8565b60405180910390f35b34801561050d57600080fd5b5061051661116d565b6040516105239190613f8f565b60405180910390f35b34801561053857600080fd5b50610553600480360381019061054e91906135b0565b611197565b005b34801561056157600080fd5b5061056a611233565b60405161057791906140d8565b60405180910390f35b34801561058c57600080fd5b506105a760048036038101906105a2919061367f565b6112c5565b6040516105b491906143da565b60405180910390f35b3480156105c957600080fd5b506105e460048036038101906105df91906134e6565b6112dd565b005b3480156105f257600080fd5b5061060d600480360381019061060891906136a8565b6112f3565b60405161061a91906140d8565b60405180910390f35b34801561062f57600080fd5b506106386113b8565b60405161064591906143da565b60405180910390f35b34801561065a57600080fd5b50610675600480360381019061067091906136a8565b6113be565b60405161068291906140d8565b60405180910390f35b34801561069757600080fd5b506106b260048036038101906106ad919061346b565b611483565b005b3480156106c057600080fd5b506106db60048036038101906106d691906136e4565b6114e5565b6040516106e89190614034565b60405180910390f35b3480156106fd57600080fd5b5061070661154d565b60405161071391906143da565b60405180910390f35b34801561072857600080fd5b50610743600480360381019061073e919061367f565b611553565b60405161075091906140d8565b60405180910390f35b34801561076557600080fd5b5061076e6116a5565b60405161077b91906143da565b60405180910390f35b34801561079057600080fd5b506107996116ab565b6040516107a691906143da565b60405180910390f35b3480156107bb57600080fd5b506107d660048036038101906107d191906133e0565b6116cf565b6040516107e39190614034565b60405180910390f35b3480156107f857600080fd5b50610801611763565b60405161080e919061404f565b60405180910390f35b34801561082357600080fd5b5061083e600480360381019061083991906133b7565b611891565b005b34801561084c57600080fd5b50610867600480360381019061086291906136a8565b611989565b60405161087491906140d8565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061094857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610958575061095782611a4e565b5b9050919050565b60606000805461096e9061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461099a9061472b565b80156109e75780601f106109bc576101008083540402835291602001916109e7565b820191906000526020600020905b8154815290600101906020018083116109ca57829003601f168201915b5050505050905090565b60006109fc82611ab8565b610a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a329061431a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a8182610f27565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae99061439a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b11611b24565b73ffffffffffffffffffffffffffffffffffffffff161480610b405750610b3f81610b3a611b24565b6116cf565b5b610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b769061423a565b60405180910390fd5b610b898383611b2c565b505050565b60116020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60136020528060005260406000206000915090505481565b610bea610be4611b24565b82611be5565b610c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c20906143ba565b60405180910390fd5b610c34838383611cc3565b505050565b600e5481565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610ca584604051602001610c919190613e07565b604051602081830303815290604052611f2a565b90508181604051602001610cba929190613e1e565b60405160208183030381529060405292505050919050565b610cda611b24565b73ffffffffffffffffffffffffffffffffffffffff16610cf861116d565b73ffffffffffffffffffffffffffffffffffffffff1614610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d459061433a565b60405180910390fd5b610d5661116d565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610d9b573d6000803e3d6000fd5b50565b610db983838360405180602001604052806000815250611483565b505050565b6000610dc982611553565b511115610e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e02906141da565b60405180910390fd5b8060105411610e4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e46906142ba565b60405180910390fd5b6000601260008381526020019081526020016000205411610ea5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9c9061417a565b60405180910390fd5b6000601260008381526020019081526020016000205490506000610ec8826120c9565b90506000610ed582610c3f565b9050610ee984610ee483611119565b6124fb565b837fe6e1ae3c28fd225da5957e598f0f29b3ea720244d8fa8862aba7d2e7aac9cdec83604051610f1991906140d8565b60405180910390a250505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc79061427a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561104a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110419061425a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611099611b24565b73ffffffffffffffffffffffffffffffffffffffff166110b761116d565b73ffffffffffffffffffffffffffffffffffffffff161461110d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111049061433a565b60405180910390fd5b611117600061256f565b565b606061114760105483604051602001611133929190613eec565b604051602081830303815290604052611f2a565b6040516020016111579190613f6d565b6040516020818303038152906040529050919050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121c9061437a565b60405180910390fd5b61122f8282612635565b5050565b6060600180546112429061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461126e9061472b565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b5050505050905090565b60126020528060005260406000206000915090505481565b6112ef6112e8611b24565b83836126e5565b5050565b6009828154811061130357600080fd5b90600052602060002001818154811061131b57600080fd5b906000526020600020016000915091505080546113379061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546113639061472b565b80156113b05780601f10611385576101008083540402835291602001916113b0565b820191906000526020600020905b81548152906001019060200180831161139357829003601f168201915b505050505081565b600d5481565b600882815481106113ce57600080fd5b9060005260206000200181815481106113e657600080fd5b906000526020600020016000915091505080546114029061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461142e9061472b565b801561147b5780601f106114505761010080835404028352916020019161147b565b820191906000526020600020905b81548152906001019060200180831161145e57829003601f168201915b505050505081565b61149461148e611b24565b83611be5565b6114d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ca906143ba565b60405180910390fd5b6114df84848484612852565b50505050565b600b83815481106114f557600080fd5b90600052602060002001828154811061150d57600080fd5b90600052602060002001818154811061152557600080fd5b906000526020600020906020918282040191900692509250509054906101000a900460ff1681565b600c5481565b606061155e82611ab8565b61159d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611594906142fa565b60405180910390fd5b60006006600084815260200190815260200160002080546115bd9061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546115e99061472b565b80156116365780601f1061160b57610100808354040283529160200191611636565b820191906000526020600020905b81548152906001019060200180831161161957829003601f168201915b5050505050905060006116476128ae565b905060008151141561165d5781925050506116a0565b60008251111561169257808260405160200161167a929190613e1e565b604051602081830303815290604052925050506116a0565b61169b846128c5565b925050505b919050565b60105481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000601054106117c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c09061421a565b60405180910390fd5b6117d760145460155461296c565b9050336011600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601054905080601360008481526020019081526020016000208190555060016010546118599190614549565b60108190555080827fce39cc4270cfd628caca43c3d4ccbbf3e948a8aadd24d313a5c3d24f8d2e959060405160405180910390a35090565b611899611b24565b73ffffffffffffffffffffffffffffffffffffffff166118b761116d565b73ffffffffffffffffffffffffffffffffffffffff161461190d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119049061433a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561197d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119749061411a565b60405180910390fd5b6119868161256f565b50565b600a828154811061199957600080fd5b9060005260206000200181815481106119b157600080fd5b906000526020600020016000915091505080546119cd9061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546119f99061472b565b8015611a465780601f10611a1b57610100808354040283529160200191611a46565b820191906000526020600020905b815481529060010190602001808311611a2957829003601f168201915b505050505081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611b9f83610f27565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611bf082611ab8565b611c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c26906141fa565b60405180910390fd5b6000611c3a83610f27565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ca957508373ffffffffffffffffffffffffffffffffffffffff16611c91846109f1565b73ffffffffffffffffffffffffffffffffffffffff16145b80611cba5750611cb981856116cf565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ce382610f27565b73ffffffffffffffffffffffffffffffffffffffff1614611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d309061413a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da09061419a565b60405180910390fd5b611db4838383612ace565b611dbf600082611b2c565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e0f919061462a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e669190614549565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f25838383612ad3565b505050565b6060600082511415611f4d576040518060200160405280600081525090506120c4565b60006040518060600160405280604081526020016153826040913990506000600360028551611f7c9190614549565b611f86919061459f565b6004611f9291906145d0565b90506000602082611fa39190614549565b67ffffffffffffffff811115611fe2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120145781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612083576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612028565b60038951066001811461209d57600281146120ad576120b8565b613d3d60f01b60028303526120b8565b603d60f81b60018303525b50505050508093505050505b919050565b60606000600c54836040516020016120e19190614451565b6040516020818303038152906040528051906020012060001c6121049190614815565b90506000600d548460405160200161211c9190614423565b6040516020818303038152906040528051906020012060001c61213f9190614815565b90506000600e548560405160200161215791906143f5565b6040516020818303038152906040528051906020012060001c61217a9190614815565b9050612298600884815481106121b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561228f5783829060005260206000200180546122029061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461222e9061472b565b801561227b5780601f106122505761010080835404028352916020019161227b565b820191906000526020600020905b81548152906001019060200180831161225e57829003601f168201915b5050505050815260200190600101906121e3565b50505050612ad8565b6123b4600984815481106122d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156123ab57838290600052602060002001805461231e9061472b565b80601f016020809104026020016040519081016040528092919081815260200182805461234a9061472b565b80156123975780601f1061236c57610100808354040283529160200191612397565b820191906000526020600020905b81548152906001019060200180831161237a57829003601f168201915b5050505050815260200190600101906122ff565b50505050612ad8565b6124d0600a84815481106123f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156124c757838290600052602060002001805461243a9061472b565b80601f01602080910402602001604051908101604052809291908181526020018280546124669061472b565b80156124b35780601f10612488576101008083540402835291602001916124b3565b820191906000526020600020905b81548152906001019060200180831161249657829003601f168201915b50505050508152602001906001019061241b565b50505050612ad8565b6040516020016124e293929190613e42565b6040516020818303038152906040529350505050919050565b61250482611ab8565b612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a9061429a565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061256a9291906131b1565b505050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006011600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006013600085815260200190815260200160002054905061268f8282612b88565b826012600083815260200190815260200160002081905550807fc58c9f48f62f00d6dbb43335e84043f12dbf76dc70abcdd19909664404ca788c846040516126d791906143da565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274b906141ba565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516128459190614034565b60405180910390a3505050565b61285d848484611cc3565b61286984848484612ba6565b6128a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289f906140fa565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606128d082611ab8565b61290f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129069061435a565b60405180910390fd5b60006129196128ae565b905060008151116129395760405180602001604052806000815250612964565b8061294384612d3d565b604051602001612954929190613e1e565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016129e092919061406a565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401612a0d93929190613ff6565b602060405180830381600087803b158015612a2757600080fd5b505af1158015612a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5f919061355e565b506000612a82846000306007600089815260200190815260200160002054612eea565b905060016007600086815260200190815260200160002054612aa49190614549565b6007600086815260200190815260200160002081905550612ac58482612f26565b91505092915050565b505050565b505050565b606060005b82518160ff161015612b825781838260ff1681518110612b26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604051602001612b3e9190613f40565b604051602081830303815290604052604051602001612b5e929190613e1e565b60405160208183030381529060405291508080612b7a906147d7565b915050612add565b50919050565b612ba2828260405180602001604052806000815250612f59565b5050565b6000612bc78473ffffffffffffffffffffffffffffffffffffffff16612fb4565b15612d30578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612bf0611b24565b8786866040518563ffffffff1660e01b8152600401612c129493929190613faa565b602060405180830381600087803b158015612c2c57600080fd5b505af1925050508015612c5d57506040513d601f19601f82011682018060405250810190612c5a9190613615565b60015b612ce0573d8060008114612c8d576040519150601f19603f3d011682016040523d82523d6000602084013e612c92565b606091505b50600081511415612cd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ccf906140fa565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d35565b600190505b949350505050565b60606000821415612d85576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ee5565b600082905060005b60008214612db7578080612da09061478e565b915050600a82612db0919061459f565b9150612d8d565b60008167ffffffffffffffff811115612df9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e2b5781602001600182028036833780820191505090505b5090505b60008514612ede57600182612e44919061462a565b9150600a85612e539190614815565b6030612e5f9190614549565b60f81b818381518110612e9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612ed7919061459f565b9450612e2f565b8093505050505b919050565b600084848484604051602001612f039493929190614093565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001612f3b929190613ddb565b60405160208183030381529060405280519060200120905092915050565b612f638383612fd7565b612f706000848484612ba6565b612faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa6906140fa565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303e906142da565b60405180910390fd5b61305081611ab8565b15613090576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130879061415a565b60405180910390fd5b61309c60008383612ace565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130ec9190614549565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46131ad60008383612ad3565b5050565b8280546131bd9061472b565b90600052602060002090601f0160209004810192826131df5760008555613226565b82601f106131f857805160ff1916838001178555613226565b82800160010185558215613226579182015b8281111561322557825182559160200191906001019061320a565b5b5090506132339190613237565b5090565b5b80821115613250576000816000905550600101613238565b5090565b6000613267613262846144a4565b61447f565b90508281526020810184848401111561327f57600080fd5b61328a8482856146e9565b509392505050565b60006132a56132a0846144d5565b61447f565b9050828152602081018484840111156132bd57600080fd5b6132c88482856146e9565b509392505050565b6000813590506132df8161530e565b92915050565b6000813590506132f481615325565b92915050565b60008151905061330981615325565b92915050565b60008135905061331e8161533c565b92915050565b60008135905061333381615353565b92915050565b60008151905061334881615353565b92915050565b600082601f83011261335f57600080fd5b813561336f848260208601613254565b91505092915050565b600082601f83011261338957600080fd5b8135613399848260208601613292565b91505092915050565b6000813590506133b18161536a565b92915050565b6000602082840312156133c957600080fd5b60006133d7848285016132d0565b91505092915050565b600080604083850312156133f357600080fd5b6000613401858286016132d0565b9250506020613412858286016132d0565b9150509250929050565b60008060006060848603121561343157600080fd5b600061343f868287016132d0565b9350506020613450868287016132d0565b9250506040613461868287016133a2565b9150509250925092565b6000806000806080858703121561348157600080fd5b600061348f878288016132d0565b94505060206134a0878288016132d0565b93505060406134b1878288016133a2565b925050606085013567ffffffffffffffff8111156134ce57600080fd5b6134da8782880161334e565b91505092959194509250565b600080604083850312156134f957600080fd5b6000613507858286016132d0565b9250506020613518858286016132e5565b9150509250929050565b6000806040838503121561353557600080fd5b6000613543858286016132d0565b9250506020613554858286016133a2565b9150509250929050565b60006020828403121561357057600080fd5b600061357e848285016132fa565b91505092915050565b60006020828403121561359957600080fd5b60006135a78482850161330f565b91505092915050565b600080604083850312156135c357600080fd5b60006135d18582860161330f565b92505060206135e2858286016133a2565b9150509250929050565b6000602082840312156135fe57600080fd5b600061360c84828501613324565b91505092915050565b60006020828403121561362757600080fd5b600061363584828501613339565b91505092915050565b60006020828403121561365057600080fd5b600082013567ffffffffffffffff81111561366a57600080fd5b61367684828501613378565b91505092915050565b60006020828403121561369157600080fd5b600061369f848285016133a2565b91505092915050565b600080604083850312156136bb57600080fd5b60006136c9858286016133a2565b92505060206136da858286016133a2565b9150509250929050565b6000806000606084860312156136f957600080fd5b6000613707868287016133a2565b9350506020613718868287016133a2565b9250506040613729868287016133a2565b9150509250925092565b61373c8161465e565b82525050565b61374b81614670565b82525050565b61375a8161467c565b82525050565b61377161376c8261467c565b614801565b82525050565b600061378282614506565b61378c818561451c565b935061379c8185602086016146f8565b6137a581614902565b840191505092915050565b60006137bb82614511565b6137c5818561452d565b93506137d58185602086016146f8565b6137de81614902565b840191505092915050565b60006137f482614511565b6137fe818561453e565b935061380e8185602086016146f8565b80840191505092915050565b600061382760408361453e565b915061383282614913565b604082019050919050565b600061384a60418361453e565b915061385582614962565b604182019050919050565b600061386d60098361453e565b9150613878826149d7565b600982019050919050565b600061389060328361452d565b915061389b82614a00565b604082019050919050565b60006138b360268361452d565b91506138be82614a4f565b604082019050919050565b60006138d660258361452d565b91506138e182614a9e565b604082019050919050565b60006138f9601c8361452d565b915061390482614aed565b602082019050919050565b600061391c60068361453e565b915061392782614b16565b600682019050919050565b600061393f602f8361452d565b915061394a82614b3f565b604082019050919050565b600061396260248361452d565b915061396d82614b8e565b604082019050919050565b600061398560198361452d565b915061399082614bdd565b602082019050919050565b60006139a860068361452d565b91506139b382614c06565b602082019050919050565b60006139cb60188361452d565b91506139d682614c2f565b602082019050919050565b60006139ee602c8361452d565b91506139f982614c58565b604082019050919050565b6000613a1160208361452d565b9150613a1c82614ca7565b602082019050919050565b6000613a3460208361453e565b9150613a3f82614cd0565b602082019050919050565b6000613a5760078361453e565b9150613a6282614cf9565b600782019050919050565b6000613a7a60388361452d565b9150613a8582614d22565b604082019050919050565b6000613a9d602a8361452d565b9150613aa882614d71565b604082019050919050565b6000613ac060298361452d565b9150613acb82614dc0565b604082019050919050565b6000613ae3602e8361452d565b9150613aee82614e0f565b604082019050919050565b6000613b0660048361452d565b9150613b1182614e5e565b602082019050919050565b6000613b2960208361452d565b9150613b3482614e87565b602082019050919050565b6000613b4c60028361453e565b9150613b5782614eb0565b600282019050919050565b6000613b6f60208361452d565b9150613b7a82614ed9565b602082019050919050565b6000613b9260318361452d565b9150613b9d82614f02565b604082019050919050565b6000613bb5602c8361452d565b9150613bc082614f51565b604082019050919050565b6000613bd860058361452d565b9150613be382614fa0565b602082019050919050565b6000613bfb60208361452d565b9150613c0682614fc9565b602082019050919050565b6000613c1e60528361453e565b9150613c2982614ff2565b605282019050919050565b6000613c41602f8361452d565b9150613c4c82615067565b604082019050919050565b6000613c6460048361453e565b9150613c6f826150b6565b600482019050919050565b6000613c87601f8361452d565b9150613c92826150df565b602082019050919050565b6000613caa60208361453e565b9150613cb582615108565b602082019050919050565b6000613ccd60218361452d565b9150613cd882615131565b604082019050919050565b6000613cf0601d8361453e565b9150613cfb82615180565b601d82019050919050565b6000613d1360208361453e565b9150613d1e826151a9565b602082019050919050565b6000613d3660318361452d565b9150613d41826151d2565b604082019050919050565b6000613d5960028361453e565b9150613d6482615221565b600282019050919050565b6000613d7c60068361453e565b9150613d878261524a565b600682019050919050565b6000613d9f60678361453e565b9150613daa82615273565b606782019050919050565b613dbe816146d2565b82525050565b613dd5613dd0826146d2565b61480b565b82525050565b6000613de78285613760565b602082019150613df78284613dc4565b6020820191508190509392505050565b6000613e1382846137e9565b915081905092915050565b6000613e2a82856137e9565b9150613e3682846137e9565b91508190509392505050565b6000613e4d8261383d565b9150613e588261381a565b9150613e6382613d06565b9150613e6e82613d92565b9150613e7a82866137e9565b9150613e8582613c57565b9150613e9082613c9d565b9150613e9c82856137e9565b9150613ea782613c57565b9150613eb282613a27565b9150613ebe82846137e9565b9150613ec982613c57565b9150613ed482613c57565b9150613edf82613d6f565b9150819050949350505050565b6000613ef782613860565b9150613f0282613a4a565b9150613f0e8285613dc4565b602082019150613f1d82613c11565b9150613f2982846137e9565b9150613f3482613b3f565b91508190509392505050565b6000613f4b8261390f565b9150613f5782846137e9565b9150613f6282613d4c565b915081905092915050565b6000613f7882613ce3565b9150613f8482846137e9565b915081905092915050565b6000602082019050613fa46000830184613733565b92915050565b6000608082019050613fbf6000830187613733565b613fcc6020830186613733565b613fd96040830185613db5565b8181036060830152613feb8184613777565b905095945050505050565b600060608201905061400b6000830186613733565b6140186020830185613db5565b818103604083015261402a8184613777565b9050949350505050565b60006020820190506140496000830184613742565b92915050565b60006020820190506140646000830184613751565b92915050565b600060408201905061407f6000830185613751565b61408c6020830184613db5565b9392505050565b60006080820190506140a86000830187613751565b6140b56020830186613db5565b6140c26040830185613733565b6140cf6060830184613db5565b95945050505050565b600060208201905081810360008301526140f281846137b0565b905092915050565b6000602082019050818103600083015261411381613883565b9050919050565b60006020820190508181036000830152614133816138a6565b9050919050565b60006020820190508181036000830152614153816138c9565b9050919050565b60006020820190508181036000830152614173816138ec565b9050919050565b6000602082019050818103600083015261419381613932565b9050919050565b600060208201905081810360008301526141b381613955565b9050919050565b600060208201905081810360008301526141d381613978565b9050919050565b600060208201905081810360008301526141f3816139be565b9050919050565b60006020820190508181036000830152614213816139e1565b9050919050565b6000602082019050818103600083015261423381613a04565b9050919050565b6000602082019050818103600083015261425381613a6d565b9050919050565b6000602082019050818103600083015261427381613a90565b9050919050565b6000602082019050818103600083015261429381613ab3565b9050919050565b600060208201905081810360008301526142b381613ad6565b9050919050565b600060208201905081810360008301526142d381613b1c565b9050919050565b600060208201905081810360008301526142f381613b62565b9050919050565b6000602082019050818103600083015261431381613b85565b9050919050565b6000602082019050818103600083015261433381613ba8565b9050919050565b6000602082019050818103600083015261435381613bee565b9050919050565b6000602082019050818103600083015261437381613c34565b9050919050565b6000602082019050818103600083015261439381613c7a565b9050919050565b600060208201905081810360008301526143b381613cc0565b9050919050565b600060208201905081810360008301526143d381613d29565b9050919050565b60006020820190506143ef6000830184613db5565b92915050565b600060408201905061440a6000830184613db5565b818103602083015261441b8161399b565b905092915050565b60006040820190506144386000830184613db5565b818103602083015261444981613af9565b905092915050565b60006040820190506144666000830184613db5565b818103602083015261447781613bcb565b905092915050565b600061448961449a565b9050614495828261475d565b919050565b6000604051905090565b600067ffffffffffffffff8211156144bf576144be6148d3565b5b6144c882614902565b9050602081019050919050565b600067ffffffffffffffff8211156144f0576144ef6148d3565b5b6144f982614902565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614554826146d2565b915061455f836146d2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561459457614593614846565b5b828201905092915050565b60006145aa826146d2565b91506145b5836146d2565b9250826145c5576145c4614875565b5b828204905092915050565b60006145db826146d2565b91506145e6836146d2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561461f5761461e614846565b5b828202905092915050565b6000614635826146d2565b9150614640836146d2565b92508282101561465357614652614846565b5b828203905092915050565b6000614669826146b2565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156147165780820151818401526020810190506146fb565b83811115614725576000848401525b50505050565b6000600282049050600182168061474357607f821691505b60208210811415614757576147566148a4565b5b50919050565b61476682614902565b810181811067ffffffffffffffff82111715614785576147846148d3565b5b80604052505050565b6000614799826146d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147cc576147cb614846565b5b600182019050919050565b60006147e2826146dc565b915060ff8214156147f6576147f5614846565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000614820826146d2565b915061482b836146d2565b92508261483b5761483a614875565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f3c67207472616e73666f726d3d277472616e736c61746528343320333529272060008201527f66696c6c3d276e6f6e65272066696c6c2d72756c653d276576656e6f6464273e602082015250565b7f3c7376672077696474683d2733383027206865696768743d273438302720786d60008201527f6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672760208201527f3e00000000000000000000000000000000000000000000000000000000000000604082015250565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f3c70617468200000000000000000000000000000000000000000000000000000600082015250565b7f4e65656420746f207761697420666f722074686520436861696e6c696e6b206e60008201527f6f646520746f20726573706f6e64210000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f626f646965730000000000000000000000000000000000000000000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574210000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f416c6c2048756d6161616e73207765726520616c7265616479206d696e746564600082015250565b7f3c67207472616e73666f726d3d277472616e736c61746528323220383229273e600082015250565b7f48756d6161616e00000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f6c65677300000000000000000000000000000000000000000000000000000000600082015250565b7f546f6b656e496420686173206e6f74206265656e206d696e7465642079657421600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f6861697273000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f222c20226465736372697074696f6e223a2252616e646f6d6c792067656e657260008201527f61746564206f6e2d636861696e2048756d6161616e222c20226174747269627560208201527f746573223a22222c2022696d616765223a220000000000000000000000000000604082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000600082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f3c67207472616e73666f726d3d277472616e736c61746528302031383729273e600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f3c67207472616e73666f726d3d277472616e736c617465283832202d3729273e600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f2f3e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f3c7061746820643d274d3632203635632d342d352d372d31322d372d3139203260008201527f2d32312033312d31372033372d3673352033382d32203430632d3320312d313060208201527f2d312d31362d356c342032394835346c382d33395a272066696c6c3d2723423260408201527f38423637272f3e00000000000000000000000000000000000000000000000000606082015250565b6153178161465e565b811461532257600080fd5b50565b61532e81614670565b811461533957600080fd5b50565b6153458161467c565b811461535057600080fd5b50565b61535c81614686565b811461536757600080fd5b50565b615373816146d2565b811461537e57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122067b0fd7d20a227be409c4e816e8823c2d88e62173faf4ee51735d84c7c5eb96a64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 398,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 402,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 406,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 410,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 416,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1383,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2552,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "hairs",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_array(t_string_storage)dyn_storage)dyn_storage"
      },
      {
        "astId": 2556,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "legs",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_array(t_string_storage)dyn_storage)dyn_storage"
      },
      {
        "astId": 2560,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "bodies",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_array(t_string_storage)dyn_storage)dyn_storage"
      },
      {
        "astId": 2565,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "alreadyMinted",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_array(t_array(t_bool)dyn_storage)dyn_storage)dyn_storage"
      },
      {
        "astId": 2567,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "maxHairs",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2569,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "maxLegs",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2571,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "maxBodies",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "_owner",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 2214,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2238,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "requestIdToSender",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2242,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "tokenIdToRandomNumber",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2246,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2248,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "keyHash",
        "offset": 0,
        "slot": "20",
        "type": "t_bytes32"
      },
      {
        "astId": 2250,
        "contract": "contracts/Humaaans.sol:Humaaans",
        "label": "fee",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_array(t_bool)dyn_storage)dyn_storage)dyn_storage": {
        "base": "t_array(t_array(t_bool)dyn_storage)dyn_storage",
        "encoding": "dynamic_array",
        "label": "bool[][][]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_bool)dyn_storage)dyn_storage": {
        "base": "t_array(t_bool)dyn_storage",
        "encoding": "dynamic_array",
        "label": "bool[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_string_storage)dyn_storage)dyn_storage": {
        "base": "t_array(t_string_storage)dyn_storage",
        "encoding": "dynamic_array",
        "label": "string[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}